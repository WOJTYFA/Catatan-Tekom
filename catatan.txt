import sqlite3

# Membuat koneksi ke database
conn = sqlite3.connect('mydatabase.db')
cursor = conn.cursor()

# Membuat tabel (jika belum ada)
cursor.execute('''CREATE TABLE IF NOT EXISTS customers (
                id INTEGER PRIMARY KEY,
                name TEXT,
                email TEXT
            )''')

# Fungsi untuk memasukkan data
def insert_data(name, email):
    cursor.execute("INSERT INTO customers (name, email) VALUES (?, ?)", (name, email))
    conn.commit()

# Fungsi untuk menampilkan semua data
def view_data():
    cursor.execute("SELECT * FROM customers")
    rows = cursor.fetchall()
    for row in rows:
        print(row)

# Fungsi untuk memperbarui data
def update_data(id, name, email):
    cursor.execute("UPDATE customers SET name=?, email=? WHERE id=?", (name, email, id))
    conn.commit()

# Fungsi untuk menghapus data
def delete_data(id):
    cursor.execute("DELETE FROM customers WHERE id=?", (id,))
    conn.commit()

# Contoh penggunaan
insert_data("John Doe", "johndoe@example.com")
insert_data("Jane Smith", "janesmith@example.com")

view_data()

update_data(1, "Johnny Doe", "johnnydoe@example.com")

view_data()

delete_data(2)

view_data()

# Menutup koneksi
conn.close()



------------------


import sqlite3

# Membuat koneksi ke database
conn = sqlite3.connect('mata_kuliah.db')
cursor = conn.cursor()

# Membuat tabel (jika belum ada)
cursor.execute('''CREATE TABLE IF NOT EXISTS mata_kuliah (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                kode TEXT,
                nama TEXT,
                sks INTEGER
            )''')

# Fungsi untuk memasukkan data
def insert_data(kode, nama, sks):
    cursor.execute("INSERT INTO mata_kuliah (kode, nama, sks) VALUES (?, ?, ?)", (kode, nama, sks))
    conn.commit()

# Fungsi untuk menampilkan semua data
def view_data():
    cursor.execute("SELECT * FROM mata_kuliah")
    rows = cursor.fetchall()
    for row in rows:
        print(row)

# Fungsi untuk memperbarui data
def update_data(id, kode, nama, sks):
    cursor.execute("UPDATE mata_kuliah SET kode=?, nama=?, sks=? WHERE id=?", (kode, nama, sks, id))
    conn.commit()

# Fungsi untuk menghapus data
def delete_data(id):
    cursor.execute("DELETE FROM mata_kuliah WHERE id=?", (id,))
    conn.commit()

# Contoh penggunaan
insert_data("MAT101", "Matematika Dasar", 3)
insert_data("INF202", "Pemrograman Python", 4)

view_data()

update_data(1, "MAT101", "Matematika Diskrit", 3)

view_data()

delete_data(2)

view_data()

# Menutup koneksi
conn.close()




class HashTable:
    def __init__(self, size=10):
        self.size = size
        self.table = [None] * self.size

    def _get_hash(self, key):
        # A simple hash function, you can use more complex ones if needed
        return key % self.size

    def _linear_probing(self, key, index):
        while True:
            if self.table[index] is None:
                return index
            index = (index + 1) % self.size

    def add(self, key, value):
        index = self._get_hash(key)
        index = self._linear_probing(key, index)
        self.table[index] = (key, value)

    def get_data(self, key):
        index = self._get_hash(key)
        while self.table[index] is not None:
            k, v = self.table[index]
            if k == key:
                return v
            index = (index + 1) % self.size
        return None

    def resize(self, new_size):
        new_table = [None] * new_size
        for item in self.table:
            if item is not None:
                key, value = item
                index = self._get_hash(key, new_table)
                index = self._linear_probing(key, index, new_table)
                new_table[index] = (key, value)
        self.table = new_table
        self.size = new_size

    def print_all(self):
        print("==== ISI HASH TABLE ====")
        for item in self.table:
            if item is not None:
                key, value = item
                print(f"NIM: {key} NAMA: {value}")

# Test case
ht = HashTable()
ht.add(71210689, "Gian")
ht.add(71210683, "Yandi")
ht.add(71210699, "Andreas")

print("==== HASH TABLE SEBELUM DIRESIZE ====")
ht.print_all()
print(f"mahasiswa dengan NIM 71210683 adalah {ht.get_data(71210683)}")

ht.resize(3)

print("==== HASH TABLE SETELAH DIRESIZE ====")
ht.print_all()
print(f"mahasiswa dengan NIM 71210683 adalah {ht.get_data(71210683)}")



class HashTable:
    def __init__(self, size=10):
        self.size = size
        self.map = [None] * self.size

    def _get_hash(self, key):
        # A simple hash function, modulo the size
        return key % self.size

    def _linear_probing(self, key, index):
        while self.map[index] is not None and self.map[index][0] != key:
            index = (index + 1) % self.size
        return index

    def add(self, key, value):
        index = self._get_hash(key)
        index = self._linear_probing(key, index)
        self.map[index] = (key, value)

    def get_data(self, key):
        index = self._get_hash(key)
        index = self._linear_probing(key, index)
        if self.map[index] is not None and self.map[index][0] == key:
            return self.map[index][1]
        return None

    def resize(self, new_size):
        new_map = [None] * new_size
        for key, value in self.map:
            index = key % new_size
            index = self._linear_probing(key, index, new_map)
            new_map[index] = (key, value)
        self.map = new_map
        self.size = new_size

    def print_all(self):
        print("==== ISI HASH TABLE ====")
        for item in self.map:
            if item is not None:
                print(f"NIM: {item[0]} NAMA: {item[1]}")

# ... (rest of the code as provided in the prompt)




--------
class HashTable:
    def __init__(self):
        self.size = 10
        self.map = [None] * self.size

    def _get_hash(self, key):
        return key % self.size

    def _linear_probing(self, key, index):
        return (self._get_hash(key) + index) % self.size

    def _probing(self, key):
        for index in range(self.size):
            probe_index = self._linear_probing(key, index)
            if self.map[probe_index] is None or self.map[probe_index] == "DELETED":
                return probe_index
            if self.map[probe_index][0] == key:
                return probe_index
        return None

    def add(self, key, value):
        index = self._probing(key)
        if index is not None:
            if self.map[index] is None or self.map[index] == "DELETED":
                self.map[index] = (key, value)
            else:
                self.map[index] = (key, value)  # Replace value for the same key
        else:
            raise Exception("Hash table penuh. Silakan resize.")

    def get_data(self, key):
        for index in range(self.size):
            probe_index = self._linear_probing(key, index)
            if self.map[probe_index] is None:
                return None
            if self.map[probe_index][0] == key:
                return self.map[probe_index][1]
        return None

    def resize(self, size):
        old_map = self.map
        self.size = size
        self.map = [None] * self.size

        for item in old_map:
            if item and item != "DELETED":
                self.add(item[0], item[1])

    def print_all(self):
        print("==== ISI HASH TABLE ====")
        for item in self.map:
            if item and item != "DELETED":
                print(f"NIM: {item[0]} NAMA: {item[1]}")