class PriorityQueueSorted:
    def __init__(self):
        self.queue = []

    def is_empty(self):
        return len(self.queue) == 0

    def len(self):
        return len(self.queue)

    def remove(self):
        if not self.is_empty():
            return self.queue.pop(0)
        else:
            print("Queue is empty")

    def peek(self):
        if not self.is_empty():
            return self.queue[0]
        else:
            print("Queue is empty")

    def add(self, data, priority):
        new_item = (priority, data)  # Simpan prioritas sebagai tuple
        self.queue.append(new_item)
        self.queue.sort(reverse=True)  # Urutkan berdasarkan prioritas (descending)

    def print_all(self):
        for priority, data in self.queue:
            print(f"{data} ({priority})")

# Test case
myQueue = PriorityQueueSorted()
myQueue.add('Gian', 2)
myQueue.add('Kezia', 4)
myQueue.print_all()
print(myQueue.peek())
print()

myQueue.add('Glen', 8)
myQueue.add('Christo', 1)
myQueue.print_all()
print(myQueue.peek())
print()

print("========REMOVE========")
myQueue.remove()
myQueue.print_all()
print()
myQueue.remove()
myQueue.print_all()
print()
myQueue.remove()
myQueue.print_all()
print()
myQueue.add('Saya', 7)
myQueue.print_all()