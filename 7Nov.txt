class PriorityQueueSorted:
    def __init__(self):
        self.queue = []

    def is_empty(self):
        return len(self.queue) == 0

    def len(self):
        return len(self.queue)

    def remove(self):
        if self.is_empty():
            raise IndexError("Queue is empty")
        return self.queue.pop(0)

    def peek(self):
        if self.is_empty():
            raise IndexError("Queue is empty")
        return self.queue[0]

    def add(self, data, priority):
        # Insert at the end and then sort using quicksort
        self.queue.append((priority, data))
        self.queue.sort(reverse=True)

    def print_all(self):
        for priority, data in self.queue:
            print(f"Priority: {priority}, Data: {data}")

# Test case
myQueue = PriorityQueueSorted()

myQueue.add('Gian', 2)
myQueue.add('Kezia', 4)
myQueue.print_all()
print(myQueue.peek())

print()

myQueue.add('Glen', 8)
myQueue.add('Christo', 1)
myQueue.print_all()
print(myQueue.peek())

print()

print("========REMOVE========")
myQueue.remove()
myQueue.print_all()
print()

myQueue.remove()
myQueue.print_all()
print()

myQueue.remove()
myQueue.print_all()
print()

myQueue.add('Saya', 7)
myQueue.print_all()