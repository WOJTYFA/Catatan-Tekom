def mergesort(data): 
    if len(data) > 1:
        mid = len(data) // 2
        left = data[:mid]
        right = data[mid:]
        
        mergesort(left)
        mergesort(right)
        
        i = 0 
        j = 0 
        k = 0
        
        while i < len(left) and j < len(right):
            if left[i][0] >= right[j][0]:
                data[k] = left[i]
                i += 1
            else:
                data[k] = right[j]
                j += 1
            k += 1
                
        while i < len(left):
            data[k] = left[i]
            i += 1
            k += 1
            
        while j < len(right):
            data[k]=right[j]
            j += 1
            k += 1

class PriorityQueueSorted:
    def __init__(self):
        self.queue = []
        
    def is_empty(self):
        return len(self.queue) == 0
    
    def __len__(self):
        return len(self.queue)

    def remove(self):
        if not self.is_empty():
            return self.queue.pop(0)[0]
    
    def peek(self):
        if not self.is_empty():
            print(self.queue[0][0], self.queue[0][1])
        
    def add(self, data, priority):
        self.queue.append((priority, data))
        mergesort(self.queue)
        
    def print_all(self):
        print("Data: ")
        for i in range(len(self.queue)):
            print(f"Data: {self.queue[i][1]}, Priority: {self.queue[i][0]}")
        

#Test Case
myQueue = PriorityQueueSorted()
myQueue.add('Gian', 2)
myQueue.add('Kezia', 8)
myQueue.print_all()
myQueue.peek()
myQueue.add('Glen', 5)
myQueue.add('Christo', 9)
myQueue.print_all()
myQueue.peek()
print("\n")
print("========REMOVE========")
myQueue.remove()
myQueue.print_all()
myQueue.remove()
myQueue.print_all()
myQueue.remove()
myQueue.print_all()
myQueue.add('Saya', 7)
myQueue.print_all()